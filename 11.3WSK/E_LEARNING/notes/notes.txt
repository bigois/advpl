ADVPL01) TIPOS DE VARIÁVEIS
	• Númerico: 	nDia		:= 21
	• Booleano:		lVerdade	:= .T.
	• Caractere:	cTexto		:= "Bernardo"
	• Data: 		dData		:= ctod("21/08/15"
	• Array:		aLista		:= {1, 2, 3}
	• Matriz:		aMatriz		:= {{1, 2, 3}, {4, 5, 6}}
	• Randômica:	xVariavel	:= "QUALQUER COISA"
	• Randômica:	xVariavel	:= nil
	• Randômica:	xVariavel	:= {{1, 2, 3}, {4, 5, 6}}
	
ADVPL02) ESCOPO DE VARIÁVEIS
	• Local:		LOCAL nDia			(exclusiva da função, não acessada pela filha)
	• Público:		PUBLIC _lVerdade	(roda até o fim da thread, existe após o fim do pai)
	• Privado:		PRIVATE _cTexto		(roda até o fim do pai, acessada pela filha)
	• Estático: 	STATIC dData		(exclusiva do pai e funções dele)
	
ADVPL03) SAÍDA POR ALERT() E CONCATENAÇÃO
	• CARACTERE
		xVariavel := "Texto"
		ALERT("VALOR: " + xVariavel)	  
	• NÚMERICO
		xVariavel := 22
		ALERT("VALOR: " + CVALTOCHAR(xVariavel))
	• LÓGICO
		xVariavel := .T.
		ALERT("VALOR: " + CVALTOCHAR(xVariavel))
	• DATE
		xVariavel := date()
		ALERT("VALOR: " + DTOC(xVariavel))
	• NULO
		xVariavel := nil
	  	ALERT("VALOR: " + xVariavel)

ADVPL04) ESTRUTURA CONDICIONAL IF, ELSE, ELSEIF
	• SE
		IF xVariavel == 1
			ALERT("LAÇO 1")
		ENDIF
	• SE, SENÃO
		IF xVariavel == 1
			ALERT("LAÇO 1")
		ELSE
			ALERT("LAÇO 2")
		ENDIF
	• SE, SENÃO SE, SENÃO
		IF xVariavel == 1
			ALERT("LAÇO 1")
		ELSEIF  xVariavel == 2
			ALERT("LAÇO 2")
		ELSE
			ALERT("LAÇO 3")
		ENDIF
		
ADVPL05) OPERADORES DE STRING E RELACIONAIS
	• CONCATEÇÃO SEM ESPAÇOS FINAIS 
		cNome := "Bernardo Caethano "
		cSobrenome := " Bigois"
		ALERT(cNome - cSobrenome)
	• CONCATEÇÃO SIMPLES	
		cNome := "Bernardo Caethano "
		cSobrenome := " Bigois"
		ALERT(cNome + cSobrenome)
	• COMPARAÇÃO DE STRING
		cNome := "Bernardo Caethano "
		cSobrenome := "Bigois"
		cSobrenomeTeste := "Bigois"
		ALERT(cNome + " = " + cSobrenome + " = " + CVALTOCHAR(cNome $ cSobrenome))
	• COMPARAÇÃO DE IGUALDADE DE STRING
		ALERT(cSobrenomeTeste + " = " + cSobrenome + " = " + CVALTOCHAR(cSobrenomeTeste $ cSobrenome))
		ALERT(cSobrenomeTeste + " = " + cSobrenome + " = " + CVALTOCHAR(cSobrenomeTeste == cSobrenome))
	• COMPARAÇÃO DE MAIOR
		ALERT(CVALTOCHAR(nNum1) + " > " + CVALTOCHAR(nNum2) + " = " + CVALTOCHAR(nNum1 > nNum2))
	• COMPARAÇÃO DE MENOR
		ALERT(CVALTOCHAR(nNum1) + " < " + CVALTOCHAR(nNum2) + " = " + CVALTOCHAR(nNum1 < nNum2))
	• COMPARAÇÃO DE IGUALDADE
		ALERT(CVALTOCHAR(nNum1) + " = " + CVALTOCHAR(nNum2) + " = " + CVALTOCHAR(nNum1 = nNum2))
	• COMPARAÇÃO DE DIFERENÇA
		ALERT(CVALTOCHAR(nNum1) + " != " + CVALTOCHAR(nNum2) + " = " + CVALTOCHAR(nNum1 != nNum2))
	• COMPARAÇÃO DE MENOR OU IGUAL
		ALERT(CVALTOCHAR(nNum1) + " <= " + CVALTOCHAR(nNum2) + " = " + CVALTOCHAR(nNum1 <= nNum2))
	• COMPARAÇÃO DE MAIOR OU IGUAL
		ALERT(CVALTOCHAR(nNum1) + " >= " + CVALTOCHAR(nNum2) + " = " + CVALTOCHAR(nNum1 >= nNum2))
		
ADVPL06) OPERADORES ARITMÉTICOS E DE ATRIBUIÇÃO
	• ATRIBUIÇÃO SIMPLES
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") := nNum3(" + CVALTOCHAR(nNum3) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 := nNum3))
	• ADIÇÃO E ATRIBUIÇÃO EM LINHA
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") += nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 += nNum2))
	• SUBTRAÇÃO E ATRIBUIÇÃO EM LINHA
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") -= nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 -= nNum2))
	• MULTIPLICAÇÃO E ATRIBUIÇÃO EM LINHA
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") *= nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 *= nNum2))
	• DIVISÃO E ATRIBUIÇÃO EM LINHA
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") /= nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 /= nNum2))
	• EXPONENCIAÇÃO E ATRIBUIÇÃO EM LINHA	
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") ^= nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 ^= nNum2))
	• MODULAÇÃO E ATRIBUIÇÃO EM LINHA
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") %= nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: nNum1 = " + CVALTOCHAR(nNum1 %= nNum2))
	• SOMA
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") + nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: = " + CVALTOCHAR(nNum1 + nNum2))
	• SUBTRAÇÃO
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") - nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: = " + CVALTOCHAR(nNum1 - nNum2))
	• MULTIPLCAÇÃO
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") * nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: = " + CVALTOCHAR(nNum1 * nNum2))
	• DIVISÃO
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") / nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: = " + CVALTOCHAR(nNum1 / nNum2))
	• EXPONENCIAÇÃO
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") ^ nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: = " + CVALTOCHAR(nNum1 ^ nNum2))
	• MODULAÇÃO
		ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") % nNum2(" + CVALTOCHAR(nNum2) + ") | RESULTADO: = " + CVALTOCHAR(nNum1 % nNum2))
		
ADVPL07) OPERADORES LÓGICOS E DE INCREMENTO/DECREMENTO PRÉ/POS FIXADO
	• INCREMENTO PÓS-FIXADO
		ALERT("ANTES: nNum1(" + CVALTOCHAR(nNum1)+ ") || DEPOIS: 1° nNum1++ (" + CVALTOCHAR(nNum1++) + ") | DEPOIS: 2° nNum1 (" + CVALTOCHAR(nNum1) + ")")
	• DECREMENTO PÓS-FIXADO
		ALERT("ANTES: nNum1(" + CVALTOCHAR(nNum1)+ ") || DEPOIS: 1° nNum1-- (" + CVALTOCHAR(nNum1--) + ") | DEPOIS: 2° nNum1 (" + CVALTOCHAR(nNum1) + ")")
	• INCREMENTO PRÉ-FIXADO
		ALERT("ANTES: nNum1(" + CVALTOCHAR(nNum1)+ ") || DEPOIS: ++nNum1 (" + CVALTOCHAR(++nNum1) + ")")
	• DECREMENTO PRÉ-FIXADO
		ALERT("ANTES: nNum1(" + CVALTOCHAR(nNum1)+ ") || DEPOIS: --nNum1 (" + CVALTOCHAR(--nNum1) + ")")
	• OPERADOR LÓGICO .AND..
		IF(nNum1 = nNum2 .AND.. nNum1 = nNum3)
			ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") == nNum2(" + CVALTOCHAR(nNum2) + ") .AND.. nNum1(" + CVALTOCHAR(nNum1) + ") == nNum3(" + CVALTOCHAR(nNum3) + ")")
	• OPERADOR LÓGICO .OR.
		IF(nNum1 == nNum2 .OR. nNum1 == nNum3)
			ALERT("nNum1(" + CVALTOCHAR(nNum1) + ") == nNum2(" + CVALTOCHAR(nNum2) + ") .OR. nNum1(" + CVALTOCHAR(nNum1) + ") == nNum3(" + CVALTOCHAR(nNum3) + ")")
	• OPERADOR LÓGICO .NOT.
		IF(!lLogico1 == lLogico2 .AND.. nNum1 == nNum3)
			ALERT("NEGADO: !lLogico1(" + CVALTOCHAR(!lLogico1) + ") == lLogico2(" + CVALTOCHAR(lLogico2) + ") .AND.. " + CVALTOCHAR(10) + " == " + CVALTOCHAR(10))
			
ADVPL08) MANIPULAÇÃO DE VARIÁVEIS
	• ALLTRIM (RETORNA A VARIÁVEL LIMPA DE ESPAÇOS EM BRANCO DO INÍCIO E FIM)
		ALERT("[ALLTRIM] ANTES: '" + cNome + cSobrenome + "' || DEPOIS: '" + ALLTRIM(cNome) + cSobrenome + "'" )
	• AT (RETORNA A POSIÇÃO DA PRIMEIRA EVIDÊNCIA DO CARACTERE INFORMADO)
		ALERT("[AT] O primeiro caractere 'E' da String: '" + cNomeTodo + "' está na posição " + CVALTOCHAR(AT("e", cNomeTodo)))
	• RAT (RETORNA A POSIÇÃO DA ÚLTIMA EVIDÊNCIA DO CARACTERE INFORMADO)
		ALERT("[RAT] O último caractere 'E' da String: '" + cNomeTodo + "' está na posição " + CVALTOCHAR(RAT("e", cNomeTodo)))
	• LEN (RETORNA O TAMANHO DA VARIÁVEL
		ALERT("[LEN] A String '" + cNomeTodo + "'" + " tem " + CVALTOCHAR(LEN(cNomeTodo)) + " caracteres")
	• LOWER (RETORNA A VARIÁVEL EM LETRAS MÍNUSCULAS)
		ALERT("[LOWER] ANTES: '" + cNomeTodo + "' || DEPOIS: '" + LOWER(cNomeTodo) + "'" )
	• UPPER (RETORNA A VARIÁVEL EM LETRAS MAIÚSCULAS)
		ALERT("[UPPER] ANTES: '" + cNomeTodo + "' || DEPOIS: '" + UPPER(cNomeTodo) + "'" )
	• ABS (RETORNA O VALOR ABSOLUTO DA VARIÁVEL)
		ALERT("[ABS] ANTES: '" + CVALTOCHAR(nNumero) + "' || DEPOIS: '" + CVALTOCHAR(ABS(nNumero)) + "'" )
	• INT (RETORNA O VALOR INTEIRO DA VARIÁVEL)
		ALERT("[INT] ANTES: '" + CVALTOCHAR(nNumero) + "' || DEPOIS: '" + CVALTOCHAR(INT(nNumero)) + "'" )
	• NOROUND (RETORNA A QUANTIDADE DESEJADA DE NÚMEROS APÓS A VÍRGULA SEM ARREDONDAR)
		ALERT("[NOROUND] ANTES: '" + CVALTOCHAR(nNumero) + "' || DEPOIS: '" + CVALTOCHAR(NOROUND(nNumero, 0)) + "'" )
	• ROUND (RETORNA A QUANTIDADE DESEJADA DE NÚMEROS APÓS A VÍRGULA ARREDONDANDO)
		ALERT("[ROUND] ANTES: '" + CVALTOCHAR(nNumero) + "' || DEPOIS: '" + CVALTOCHAR(ROUND(nNumero, 0)) + "'" )
	• VALTYPE (RETORNA O TIPO DA VARIÁVEL INFORMADA)
		ALERT("[VALTYPE] O tipo da variável '" + cNomeTodo + "' é " + VALTYPE(cNome))
		
ADVPL09)
	• LOOP FOR
		FOR nCont := 1 TO 10 STEP 1
			ALERT(nCont)
		NEXT
	• LOOP WHILE
		WHILE nCont != 10
			ALERT(nCont)
			nCont++
		ENDDO
	• LOOP IF
		IF(MSGYESNO("Você quer brincar na neve?") == .T.)
			MSGINFO("#BrincandoNaNeve")
		ENDIF
	• LOOP IF, ELSE
		IF(MSGYESNO("Você quer brincar na neve?") == .T.)
			MSGINFO("#BrincandoNaNeve")
		ELSE
			MSGINFO("Ok, entendi que você não quer brincar...")
		ENDIF
	• LOOP IF, ELSEIF, ELSE
		IF(MSGYESNO("Você quer brincar na neve?") == .T.)
			MSGINFO("#BrincandoNaNeve")
		ELSEIF(MSGYESNO("Tem certeza que não quer brincar na neve?") == .F.)
			MSGINFO("#BrincandoNaNeve")
		ELSE
			MSGINFO("Ok, entendi que você não quer brincar...")
		ENDIF
	• LOOP DO CASE
		lConfirma := MSGYESNO("Você quer brincar na neve?")
		DO CASE
			CASE lConfirma == .T.
			MSGINFO("#BrincandoNaNeve")
			CASE lConfirma == .F.
			MSGINFO("Ok, entendi que você não quer brincar...")
			OTHERWISE
			MSGINFO("Opção Inválida!")
		ENDCASE